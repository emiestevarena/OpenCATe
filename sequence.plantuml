@startuml OpenCATe
skinparam   Style   strictuml
skinparam   SequenceMessageAlignment center


class Segment{
    -Source: String
    -Target: String
    +getter()
    +setter()
    +constructor()
}

class TranslationMemory{
    -Segments: ArrayList
    -MaxLength: int
    +getter()
    +setter()
    +constructor()
}

class Entry{
    #Source: String 
    #Target:String
    +getter()
    +setter()
    +constructor()
    +compare()
}

class Expressions extends Entry{
    -Key: String
    +super()
    +getter()
    +setter()
    +constructor()
}

class Glossary{
    -Entries: ArrayList
    -Expressions: ArrayList
    +getter()
    +setter()
    +constructor()
}

class TranslationServices{
    -Source: String
    -Target: String
    +setup()
    -setLanguages()
    +input()
    -setSource()
    -searchMatches()
    -checkLength()
    -setTarget()
    -setGlossary()
    -export()
}

class Source{
    -Source: ArrayList
    -Length: int
    +read()
    +getter()
    +setter()
}

class Output{
    -Target: String
    +create()
    +write()
}

class GlossaryServices{
    +inputEntry()
    +inputExpression()
    +searchEntry()
}

class MemoryCheck{
    -Words: ArrayList
    -Percentage: double
    +getter()
    +setter()
    +constructor()
}

class MemoryServices{
    -Percentage: int
    +split()
    +compare()
}

class GlossaryImport{
    -Line: String
    -Entries: int
    +read()
}

class GlossaryExport{
    +write()
}

class ExpressionsImport{
    -Line: String
    -Entries: int
    +read()
}

class ExpressionsExport{
    +write()
}

class AuxMemory{
    -Segments: ArrayList
    read()
    getter()
    setter()
}

AuxMemory --> Segment :creates
Entry --> Glossary :stored in
Expressions --> Glossary :stored in
ExpressionsExport--> Glossary :gets
ExpressionsImport --> Expressions: creates
GlossaryImport --> Entry: creates
GlossaryServices --> Entry : creates
GlossaryServices --> Expressions: creates
GlossaryServices --> Glossary: consults
GlossaryExport --> Glossary :gets
MemoryServices --> MemoryCheck: sets
MemoryServices --> TranslationMemory:compares
MemoryServices --> AuxMemory: compares
Output --> TranslationMemory: gets
Segment --> TranslationMemory :stored in
Source --> Segment: creates
TranslationServices--> Segment :creates
TranslationServices --> Source: reads
TranslationServices --> Output: writes
TranslationServices --> GlossaryServices: uses
TranslationServices --> MemoryServices: uses
TranslationServices --> MemoryCheck : creates
TranslationServices --> GlossaryExport :writes
TranslationServices --> GlossaryImport :reads
TranslationServices --> ExpressionsExport :writes
TranslationServices --> ExpressionsImport :reads
TranslationServices --> AuxMemory: reads
@enduml
